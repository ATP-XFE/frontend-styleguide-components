// Variables
$accordion-border: 1px solid $color-gray-lighter;

// Accordion Styles

$icon-size: $spacing-md-small;
$h-padding: $spacing-medium;
$v-padding: $spacing-md-small;

@mixin accordion-list-styles {
  @include unstyled-list;
  color: $color-base;
  margin: 0;
  padding: 0;
  width: 100%;
}

@mixin accordion-list-item-styles {
  background-color: $color-gray-lightest;
  list-style: none;
  margin-bottom: $spacing-small;
  width: 100%;
}

// scss-lint:disable PropertyCount
@mixin accordion-button-styles {
  @include button-unstyled;
  background-color: $color-gray-lightest;
  background-image: url('#{$icons-folder-path}/minus.svg');
  background-position: right $h-padding center;
  background-repeat: no-repeat;
  background-size: $icon-size;
  color: $color-base;
  cursor: pointer;
  display: inline-block;
  //font-weight: $font-weight-bold;
  margin: 0;
  line-height: $body-text-line-height;
  padding: rem-calc(16); //padding: $v-padding ($h-padding * 2 + $icon-size) $v-padding $h-padding;
  width: 100%;

  &:hover {
    background-color: $color-gray-lighter;
    color: $color-base;
  }

  h1, .h1,
  h2, .h2,
  h3, .h3,
  h4, .h4,
  h5, .h5,
  h6, .h6 {
    margin: 0;
  }
}
// scss-lint:enable PropertyCount

@mixin accordion-button-unopened-styles {
  background-image: url('#{$icons-folder-path}/plus.svg');
  background-repeat: no-repeat;
  background-size: $icon-size;
}

@mixin accordion-nested-list {
  > ul li ul {
    list-style: disc;
    > li > ul {
      list-style: circle;
      > li > ul {
        list-style: square;
      }
    }
  }
}

.accordion,
.accordion-bordered {
  @include accordion-list-styles;
  @include accordion-nested-list;
  @include accordion-nested-list;

  + .accordion,
  + .accordion-bordered {
    margin-top: $spacing-small;
  }



  // TODO deprecated ruleset based on old accordion.
  > ul {
    @include accordion-list-styles;

    // TODO deprecated ruleset based on old accordion.
    > li {
      @include accordion-list-item-styles;
    }

    // TODO deprecated ruleset based on old accordion.
    button {
      @include accordion-button-styles;
    }

    // TODO deprecated ruleset based on old accordion.
    [aria-expanded=false] {
      @include accordion-button-unopened-styles;
    }
  }

  > li {
    @include accordion-list-item-styles;
  }

}

.accordion-bordered {
  .accordion-content {
    border-bottom: $accordion-border;
    border-left: $accordion-border;
    border-right: $accordion-border;
  }
}

.accordion-content {
  background-color: $color-white;
  overflow: auto;
  padding: $spacing-md-small $spacing-medium;

  > *:first-child {
    margin-top: 0;
  }

  > *:last-child {
    margin-bottom: 0;
  }

  &:not([aria-hidden]) {
    @include sr-only();
  }

  @include accessibly-hidden();
}

.accordion-button {
  @include accordion-button-styles;
  position: relative;
  transition: none;
  .icon_text {
    font-weight: $font-weight-bold;
  }
  .accordion-icon {
    position: absolute;
    top: 50%;
    right: 6.4rem; // Same padding-right as the accordion-button
    //width: 28px;
    height: 24px;
    line-height: 24px;
    text-align: center;
    transform: translateY(-50%);

    .icon-svg {
      fill: $color-base;
    }


    /*
    &.icon-bg-primary {
      background-color: $color-primary;
    }

    &.icon-bg-success {
      background-color: $color-success;
    }

    &.icon-bg-info {
      background-color: $color-info;
    }

    &.icon-bg-warning {
      background-color: $color-warning;
    }

    &.icon-bg-error {
      background-color: $color-error;
    }*/
  }
}
.accordion-button[aria-describedby="error-message"] {
  border: solid 2px $color-error;
}
.accordion-button[aria-expanded=true] {
  font-weight: $font-weight-bold;
}
.accordion-button[aria-expanded=false] {
  @include accordion-button-unopened-styles;
  // display: flex;
}
