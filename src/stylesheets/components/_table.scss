$border-row-hover: 1px solid  $color-primary-lightest;
$border-row: 1px solid $color-gray-light;

.table {
    cursor: pointer;
    margin: 0;

    // It is necessary to set 1px transprarent border in order to prevent table moving when hovering over row
    td, th {
        border: 1px transparent;
        padding: 0px 20px;
        background-color: inherit;
    }

    &.bordered {
        tr {
            border: $border-row;
        }
    }

    &.borderless {
        tr {
            border: $border-row;
            border-left-color: transparent;
            border-right-color: transparent;
        }
    }

    &.zebra {
        tr:nth-child(even) {
            background-color: $color-gray-light;
        }

        tbody > tr:not(:last-child) {
            border-top-color: transparent;
            border-bottom-color: transparent;
        }

        &.borderless {
            tr,th {
                border-color: transparent;
            }
        }
    }

    th {
        background-color: $color-gray-light;
        text-align: left;
    }


    tbody {
        tr {
            background-color: $color-white;
            .overflow-menu {
                align-self: center;
                .overflow-menu-btn {
                    color: $color-gray-medium-dark;
                    width: $hit-area;
                    height: $hit-area;
                    position: absolute; // hit-area might be bigger than row's height
                    transform: translate(-50%,-50%);
                }
            }
        }

        tr:hover:not(.expandable-row) {
            td {
                background-color:  $color-primary-lightest;
                border-top: $border-row-hover;
                border-bottom: $border-row-hover;
            }
            td:first-child {
                border-left: $border-row-hover;
            }
            td:last-child {
                border-right: $border-row-hover;
            }
        }

        tr:not(:hover) .overflow-menu .overflow-menu-btn:not(:focus) {
            visibility: hidden;
        }
    }

    tr {
        height: $spacing-x-large;
    }
    &.compact {
        tbody > tr {
            height: $spacing-medium;
        }
    }
    &.short {
        tbody > tr {
            height: $spacing-large;
        }
    }
    &.tall {
        tbody > tr {
            height: $spacing-xx-large;
        }
    }
}
