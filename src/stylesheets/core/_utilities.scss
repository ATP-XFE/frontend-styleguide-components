// Focus state mixin
@mixin focus {
  outline: $focus-outline;
  outline-offset: $focus-spacing;
}

// Mobile-first media query helper
@mixin media($bp) {
  @media screen and (min-width: #{$bp}) {
    @content;
  }
}

// Screen reader only helper
@mixin sr-only() {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
}

// This "negates" the sr-only() helper; useful if
// we want the default state of something to be
// for screen readers only, but we want to force
// it to show for sighted users under more specific
// conditions.
@mixin not-sr-only() {
  position: static;
}

.sr-only {
  @include sr-only();
}

// Aria hidden helper
@mixin accessibly-hidden() {
  &[aria-hidden=true] {
    display: none;
  }
}

// Unstyled list helper
@mixin unstyled-list() {
  @include margin(0 null);
  list-style-type: none;
  padding-left: 0;

  > li {
    margin-bottom: 0;
  }
}

// Font smoothing mixin
// Only use for light text on dark background
// TODO: Remove after adding PostCSS
@mixin font-smoothing {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}

// Content size helpers
@mixin allow-layout-classes {
  @include margin(null auto);

  &.width-one-half {
    @include media($medium-screen) {
      width: 50%;
    }
  }

  &.width-one-third {
    @include media($medium-screen) {
      width: 33%;
    }
  }

  &.width-two-thirds {
    @include media($medium-screen) {
      width: 67%;
    }
  }

  &.width-one-fourth {
    @include media($medium-screen) {
      width: 25%;
    }
  }

  &.width-three-fourths {
    @include media($medium-screen) {
      width: 75%;
    }
  }

  &.align-left {
    @include media($medium-screen) {
      float: left;
      margin-right: 2em;
      margin-top: 0.5em;
    }
  }

  &.align-right {
    @include media($medium-screen) {
      float: right;
      margin-left: 2em;
      margin-top: 0.5em;
    }
  }
}

@mixin sidenav-list {
  @include unstyled-list();

  border-bottom: 1px solid $color-border-focus;

  > li {
    background-color: transparent;
    border-top: 1px solid $color-border-focus;
    font-size: $base-font-size;
  }

  a {
    border: none;
    color: $color-base;
    display: block;
    line-height: 1.3;
    padding: $spacer;
    padding-left: map-get($spacers, 4);
    text-decoration: none;

    &:hover {
      background-color: $color-gray-lightest;
      text-decoration: none;
      color: $color-link;
    }

    &:focus {
      outline-offset: 0;
      position: relative;
      z-index: 1;
    }

    &.current { /* stylelint-disable-line selector-no-qualifying-type */
      color: $color-base;
      font-weight: $font-weight-semibold;
      padding-left: map-get($spacers, 4);
    }
    &.active { 
      color: $color-base;
      font-weight: $font-weight-semibold;
      padding-left: map-get($spacers, 4) - 4px;
      border-left: $sidenav-current-border-width solid $color-base;
    }
  }
}

@mixin sidenav-list-locked {
  @include unstyled-list();

  border-top: 1px solid $color-border-focus;
  border-bottom: 1px solid $color-border-focus;

  > li {
    background-color: transparent;
    border-top: 1px solid $color-border-focus;
    font-size: $base-font-size;
    cursor:default;

    &:first-child {
      border-top: none;
    }
  }

  a {
    border: none;
    color: $color-base;
    display: block;
    line-height: 1.3;
    padding: 0.85rem 1rem 0.85rem 1.8rem;
    text-decoration: none;

    &:hover {
      background-color: $color-white;
      text-decoration: none;
      color: $color-base;
      cursor:default;
      
    }

    &:focus {
      outline-offset: 0;
      position: relative;
      z-index: 1;
    }

    &.current { /* stylelint-disable-line selector-no-qualifying-type */
      color: $color-base;
      font-weight: $font-weight-semibold;
      padding-left: 1.4rem;
      padding-left: map-get($spacers, 4) - 4px;
      cursor:default;
    }
     &.active { /* stylelint-disable-line selector-no-qualifying-type */
      color: $color-base;
      font-weight: $font-weight-semibold;
      padding-left: 1.4rem;
      padding-left: map-get($spacers, 4) - 4px;
      cursor:default;
    }
  }
}

@mixin sidenav-sublist {
  @include unstyled-list();
  margin: 0;
  width: 100%;

  li {
    border: none;
    //font-size: $h5-font-size;
  }

  a {
    padding-left: 32px;
    line-height: $heading-line-height;

    
    &.current { /* stylelint-disable-line selector-no-qualifying-type */
      border: none;
      padding-left: map-get($spacers, 6);
      
    }
    &.active { /* stylelint-disable-line selector-no-qualifying-type */
      padding-left: map-get($spacers, 6) - 4px;
    }
  }

  .sidenav-sub_list {
    a {
      padding-left: map-get($spacers, 8);

      &:focus {
        outline-offset: 0;
      }

      &.current { /* stylelint-disable-line selector-no-qualifying-type */
        border: none;
        padding-left: map-get($spacers, 8);
        
      }
      &.active { /* stylelint-disable-line selector-no-qualifying-type */
        padding-left: map-get($spacers, 8) - 4px;
      }
    }
  }
}
